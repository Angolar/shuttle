import "shuttle.proto";
package baidu.shuttle;

option cc_generic_services = true;

message TaskStatistics {
    optional int32 total = 1;
    optional int32 pending = 2;
    optional int32 running = 3;
    optional int32 failed = 4;
    optional int32 killed = 5;
    optional int32 completed = 6;
}

message TaskCounter {
    optional string key = 1;
    optional int64 value = 2;
}

message SubmitJobRequest {
    required JobDescriptor job = 1;
}

message SubmitJobResponse {
    optional Status status = 1;
    optional string jobid = 2;
}

message UpdateJobRequest {
    required string jobid = 1;
    message UpdatedNode {
        required int32 node = 1;
        required int32 capacity = 2;
    }
    repeated UpdatedNode capacities = 3;
}

message UpdateJobResponse {
    optional Status status = 1;
}

message KillJobRequest {
    required string jobid = 1;
}

message KillJobResponse {
    optional Status status = 1;
}

message ListJobsRequest {
    optional bool all = 1;
}

message JobOverview {
    optional JobDescriptor desc = 1;
    optional string jobid = 2;
    optional JobState state = 3;
    repeated TaskStatistics stats = 5;
    optional int32 start_time = 6;
    optional int32 finish_time = 7;
}

message TaskOverview {
    optional TaskInfo info = 1;
    optional TaskState state = 2;
    optional string minion_addr = 3;
    optional float progress = 4;
    optional int64 start_time = 5;
    optional int64 finish_time = 6;
}

message ListJobsResponse {
    optional Status status = 1;
    repeated JobOverview jobs = 2;
}

message ShowJobRequest {
    required string jobid = 1;
    optional bool all = 2;
}

message ShowJobResponse {
    optional Status status = 1;
    optional JobOverview job = 2;
    repeated TaskOverview tasks = 3;
}

message AssignTaskRequest {
    required string jobid = 1;
    required int32 node = 2;
    optional string endpoint = 3;
}

message AssignTaskResponse {
    optional Status status = 1;
    optional JobDescriptor job = 2;
    optional TaskInfo task = 3;
}

message FinishTaskRequest {
    required string jobid = 1;
    required int32 node = 2;
    required int32 task_id = 3;
    required int32 attempt_id = 4;
    required TaskState task_state = 5;
    optional string endpoint = 6;
    repeated TaskCounter counters = 7;
}

message FinishTaskResponse {
    optional Status status = 1;
}

service Master {
    rpc SubmitJob(SubmitJobRequest) returns (SubmitJobResponse);
    rpc UpdateJob(UpdateJobRequest) returns (UpdateJobResponse);
    rpc KillJob(KillJobRequest) returns (KillJobResponse);
    rpc ListJobs(ListJobsRequest) returns (ListJobsResponse);
    rpc ShowJob(ShowJobRequest) returns (ShowJobResponse);
    rpc AssignTask(AssignTaskRequest) returns (AssignTaskResponse);
    rpc FinishTask(FinishTaskRequest) returns (FinishTaskResponse);
}

