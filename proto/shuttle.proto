package baidu.shuttle;
option cc_generic_services = true;

enum Status {
    kOk = 0;
    kGalaxyError = 1;
    kNoSuchJob = 2;
    kNoMore = 3;
    kOpenFileFail = 5;
    kCloseFileFail = 6;
    kWriteFileFail = 7;
    kInvalidArg = 8;
    kBadMagic = 9;
    kReadFileFail = 10;
    kNotImplement = 11;
    kNoSuchTask = 12;
    kSuspend = 13;
    kUnKnown = 20;
}

enum JobPriority {
    kVeryHigh = 0;
    kHigh = 1;
    kNormal = 2;
    kLow = 3;
}

enum JobState {
    kPending = 0;
    kRunning = 1;
    kFailed = 2;
    kKilled = 3;
    kCompleted = 4;
}

enum TaskState {
    kTaskPending = 0;
    kTaskRunning = 1;
    kTaskFailed = 2;
    kTaskKilled = 3;
    kTaskCompleted = 4;
    kTaskCanceled = 5;
    kTaskMoveOutputFailed = 6;
    kTaskUnknown = 10;
}

enum Partition {
    kKeyFieldBasedPartitioner = 0;
    kIntHashPartitioner = 1;
}

enum WorkMode {
    kMap = 0;
    kReduce = 1;
}

message DfsInfo {
    optional string host = 1;
    optional string port = 2;
    optional string user = 3;
    optional string password = 4;    
}

enum InputFormat {
    kTextInput = 0;
    kBinaryInput = 1;
    kNLineInput = 2;
}

enum OutputFormat {
    kTextOutput = 0;
    kBinaryOutput = 1;
    kSuffixMultipleTextOutput = 2;
}

enum PipeStyle {
    kStreaming = 0;
    kBiStreaming = 1;
}

message NodeConfig {
    optional int32 node = 1;
    optional WorkMode type = 2;
    optional int32 capacity = 3;
    optional int32 total = 4;
    optional int32 millicores = 5;
    optional int64 memory = 6;
    optional string command = 7;
    repeated string inputs = 8;
    optional InputFormat input_format = 9;
    optional DfsInfo input_dfs = 10;
    optional string output = 11;
    optional OutputFormat output_format = 12;
    optional DfsInfo output_dfs = 13;
    optional Partition partition = 14;
    optional string key_separator = 15;
    optional int32 key_fields_num = 16;
    optional int32 partition_fields_num = 17;
    optional bool allow_duplicates = 18 [default = true];
    optional int32 retry = 19;
}

message JobDescriptor {
    optional string name = 1;
    optional string user = 2;
    optional JobPriority priority = 3;
    repeated string files = 4;
    optional string cache_archive = 5;
    optional PipeStyle pipe_style = 6;
    optional int64 split_size = 7;
    repeated NodeConfig nodes = 8;
    message NodeNeigbor {
        repeated int32 next = 1;
    }
    repeated NodeNeigbor map = 9;
}

message TaskInput {
    optional string input_file = 3;
    optional int64 input_offset = 4;
    optional int64 input_size = 5;
}

message TaskInfo {
    optional int32 task_id = 1;
    optional int32 attempt_id = 2;
    optional TaskInput input = 3;
    optional int32 node = 4;
}
