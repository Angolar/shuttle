import "shuttle.proto";
package baidu.shuttle;

option cc_generic_services = true;

enum JobState {
    kPending = 0;
    kRunning = 1;
    kFailed = 2;
    kKilled = 3;
    kCompleted = 4;
}

message TaskStatistics {
    optional int32 total = 1;
    optional int32 pending = 2;
    optional int32 running = 3;
    optional int32 failed = 4;
    optional int32 killed = 5;
    optional int32 completed = 6;
}

message JobAllocation {
    optional int32 resource_no = 1;
    optional int32 attempt = 2;
    optional string endpoint = 3;
    optional TaskState state = 4;
    optional int64 alloc_time = 5;
    optional int64 period = 6 [default = -1];
    optional bool is_map = 7;
}

message InputInfo {
    optional string input_file = 1;
    optional int64 offset = 2;
    optional int64 size = 3;
}

message JobCollection {
    repeated JobAllocation jobs = 1;
    repeated InputInfo inputs = 2;
    optional JobState state = 3;
    optional int32 start_time = 4;
    optional int32 finish_time = 5;
}

message SubmitJobRequest {
    required JobDescriptor job = 1;
}

message SubmitJobResponse {
    optional Status status = 1;
    optional string jobid = 2;
}

message UpdateJobRequest {
    required string jobid = 1;
    optional JobPriority priority = 2;
    optional int32 map_capacity = 3;
    optional int32 reduce_capacity = 4;
}

message UpdateJobResponse {
    optional Status status = 1;
}

message KillJobRequest {
    required string jobid = 1;
}

message KillJobResponse {
    optional Status status = 1;
}

message ListJobsRequest {
    optional bool all = 1;
}

message JobOverview {
    optional JobDescriptor desc = 1;
    optional string jobid = 2;
    optional JobState state = 3;
    optional TaskStatistics map_stat = 4;
    optional TaskStatistics reduce_stat = 5;
    optional int32 start_time = 6;
    optional int32 finish_time = 7;
}

message TaskOverview {
    optional TaskInfo info = 1;
    optional TaskState state = 2;
    optional string minion_addr = 3;
    optional float progress = 4;
    optional int64 start_time = 5;
    optional int64 end_time = 6;
}

message ListJobsResponse {
    optional Status status = 1;
    repeated JobOverview jobs = 2;
}

message ShowJobRequest {
    required string jobid = 1;
    optional bool all = 2;
    optional bool show_detail = 3;
}

message ShowJobResponse {
    optional Status status = 1;
    optional JobOverview job = 2;
    repeated TaskOverview tasks = 3;
    optional string error_msg = 4;
    repeated TaskCounter counters = 5;
}

message AssignTaskRequest {
    optional string jobid = 1;
    optional string endpoint = 2;
    optional WorkMode work_mode = 3;
}

message AssignTaskResponse {
    optional Status status = 1;
    optional TaskInfo task = 2;
}

message TaskCounter {
    optional string key = 1;
    optional int64 value = 2;
}

message FinishTaskRequest {
    required string jobid = 1;
    required int32 task_id = 2;
    required int32 attempt_id = 3;
    optional TaskState task_state = 4;
    optional string endpoint = 5;
    optional WorkMode work_mode = 6;
    optional string error_msg = 7;
    repeated TaskCounter counters = 8;
}

message FinishTaskResponse {
    optional Status status = 1;
}

service Master {

    rpc SubmitJob(SubmitJobRequest) returns (SubmitJobResponse);

    rpc UpdateJob(UpdateJobRequest) returns (UpdateJobResponse);

    rpc KillJob(KillJobRequest) returns (KillJobResponse);

    rpc ListJobs(ListJobsRequest) returns (ListJobsResponse);

    rpc ShowJob(ShowJobRequest) returns (ShowJobResponse);

    rpc AssignTask(AssignTaskRequest) returns (AssignTaskResponse);

    rpc FinishTask(FinishTaskRequest) returns (FinishTaskResponse);

}
